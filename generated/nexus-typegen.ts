/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../src/graphql/context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Query: {};
  User: { // root type
    _id?: string | null; // String
    accountStatus?: string | null; // String
    avatarURL?: string | null; // String
    bannerURL?: string | null; // String
    bio?: string | null; // String
    channelName?: string | null; // String
    country?: string | null; // String
    createdAt?: string | null; // String
    disLikedVideos?: Array<string | null> | null; // [String]
    email?: string | null; // String
    firstName?: string | null; // String
    isVerified?: boolean | null; // Boolean
    lastName?: string | null; // String
    likedVideos?: Array<string | null> | null; // [String]
    phoneNumber?: string | null; // String
    updatedAt?: string | null; // String
    userName?: string | null; // String
    watchHistory?: Array<string | null> | null; // [String]
    watchLater?: Array<string | null> | null; // [String]
  }
  UserResponse: { // root type
    data?: NexusGenRootTypes['User'] | null; // User
    message?: string | null; // String
    statusCode?: number | null; // Int
    success?: boolean | null; // Boolean
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Query: { // field return type
    getUser: NexusGenRootTypes['UserResponse'] | null; // UserResponse
  }
  User: { // field return type
    _id: string | null; // String
    accountStatus: string | null; // String
    avatarURL: string | null; // String
    bannerURL: string | null; // String
    bio: string | null; // String
    channelName: string | null; // String
    country: string | null; // String
    createdAt: string | null; // String
    disLikedVideos: Array<string | null> | null; // [String]
    email: string | null; // String
    firstName: string | null; // String
    isVerified: boolean | null; // Boolean
    lastName: string | null; // String
    likedVideos: Array<string | null> | null; // [String]
    phoneNumber: string | null; // String
    updatedAt: string | null; // String
    userName: string | null; // String
    watchHistory: Array<string | null> | null; // [String]
    watchLater: Array<string | null> | null; // [String]
  }
  UserResponse: { // field return type
    data: NexusGenRootTypes['User'] | null; // User
    message: string | null; // String
    statusCode: number | null; // Int
    success: boolean | null; // Boolean
  }
}

export interface NexusGenFieldTypeNames {
  Query: { // field return type name
    getUser: 'UserResponse'
  }
  User: { // field return type name
    _id: 'String'
    accountStatus: 'String'
    avatarURL: 'String'
    bannerURL: 'String'
    bio: 'String'
    channelName: 'String'
    country: 'String'
    createdAt: 'String'
    disLikedVideos: 'String'
    email: 'String'
    firstName: 'String'
    isVerified: 'Boolean'
    lastName: 'String'
    likedVideos: 'String'
    phoneNumber: 'String'
    updatedAt: 'String'
    userName: 'String'
    watchHistory: 'String'
    watchLater: 'String'
  }
  UserResponse: { // field return type name
    data: 'User'
    message: 'String'
    statusCode: 'Int'
    success: 'Boolean'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}